name: Corewar workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  EXECUTABLES: corewar/corewar, asm/asm

jobs:
  check-commit-style:
    name: Checking that the commit respects the commit style
    runs-on: ubuntu-latest
    steps:
      - name: Check if trigger is 'workflow_dispatch'
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Trigger is workflow_dispatch. Skipping task..."
            exit 0
          fi
      - name: Check commit style
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: gsactions/commit-message-checker@v2
        with:
          pattern: '^(Add|Update|Fix|Remove|Edit|Delete):\s.+'
          error: 'Bad commit style!'

  check_program_compilation:
    needs: check-commit-style
    name: Checking that the program compiles correctly
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Make
        timeout-minutes: 2
        run: make
      - name: Make clean
        run: make clean
      - name: Verify is files exists and is executable
        run: |
          for exe in $(echo $EXECUTABLES | tr ',' ' ');
            do
            if [ ! -x $exe ];
              then exit 1;
            fi;
            done;
            exit 0;

  check_coding_style:
    needs: check_program_compilation
    name: Checking the coding style
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Check the coding style
        run: |
          check.sh $(pwd) $(pwd);
          if [ -s coding-style-reports.log ];
            then while read line;
              do
              type=$(echo $line | awk -F ":" '{print $3}');
              file=$(echo $line | awk -F ":" '{print $1}' | sed 's/^.\///');
              nb_line=$(echo $line | awk -F ":" '{print $2}');
              error=$(echo $line | awk -F ":" '{print $4}');
              echo "::error ,title=$type coding style error,file=$file,line=$nb_line:: $error";
              done < coding-style-reports.log;
            exit 1;
          fi;
          exit 0;

  run_tests:
    needs: check_coding_style
    name: Running tests
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Execute tests
        timeout-minutes: 2
        run: make tests_run
      - name : Verify if there is failure test
        run: ./asm/asm_test
        if: ${{ failure() }}
          exit 1
      - name : Verify if there is failure test
        run: ./corewar/corewar_test
        if: ${{ failure() }}
          exit 1

  push_to_mirror:
    needs: run_tests
    name: Pushing to the mirror repository
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ vars.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
          source_branch:
            main
